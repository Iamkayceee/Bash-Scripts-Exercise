## Exercises

1. Write a script that pings a list of hosts and reports which ones are reachable.

2. Create a script that monitors a specific port on a server and sends an alert if it becomes unreachable.

3. Develop a script that fetches the content of a webpage and extracts all unique IP addresses mentioned in it.

4. Write a script that performs a simple port scan on a given IP address for common ports.

5. Create a network diagnostics script that collects information about the system's network interfaces, routing table, and DNS configuration.

# Answers

1. 
#!/bin/bash

hosts=(
        "1.1.1.1"
        "8.8.8.8"
        "example.com"
)
ping_host() {
        host=$1
        if ping -c 2 "$host" &> /dev/null;
then
        echo "$host is reachable"
else
        echo "$host is not reachable"
fi
}

for host in "${hosts[@]}"; do
ping_host "$host"
done

2. 
#!/bin/bash

HOST="example.com"
PORT="80"
CHECK_INTERNAL="60"
ALERT_EMAIL="your_email@example.com"

check_port() {
        nc -z -w5 "$HOST" "$PORT" &> /dev/null
        return $?
}
send_alert() {
        echo "ALERT: port $PORT on $HOST is unreachable!" | mail -s "port $PORT unreachable alert" "$ALERT_EMAIL"
}
 
while time; do
        if ! check_port; then
        send_alert
fi

        sleep "$CHECK_INTERVAL"
done

Note:   install netcat
        -z tells nc to scan without sending data -w5 will wait for 5sec to check the port

3. 
#!/bin/bash
URL="http://example.com"

webpage_content="$(curl -s "$URL")

ip_address=$(echo "$webpage_content" | grep -oP '\b(?:\d{1,3}\.){3}\d{1,3}\b' | sort - u)
if [ -u "$ip_addresses" ]; then
        echo "unique ip addresses found on "$URL: "
        echo "$ip_addresses"
else
        echo "no ip addresses found on $URL"
fi

4. 
#!/bin/bash

scan_ports() {
        local target_ip=$1
        local ports=("21" "443" "22")

echo "scanning ip: $target_ip"
echo "_______________________"

        for port in "${ports[@]}"; do
        if nc -z -w1 "$target_ip" "$port" &> /dev/null;
then
        echo "port $port is OPEN"
else
        echo "port $port is CLOSED"
fi
done
}

read -p "enter the ip address to scan: " target_ip
        if [[ ! $target_ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$]];
then
        echo "invalid ip address format"
        exit 1
fi

scan_ports "straight_ip"

5. 
#!/bin/bash

get_network_inter() {
        echo "## Network Interface ##"
        ip addr show
        echo " "
}
 
get_routing_table() {
        echo "## Routing Table ##"
        ip route show"
        echo " "
}

get_dns_config() {
        echo "## DNS config ##"
        if [ -f /etc/resolv.conf ]; then
        cat /etc/resolv.conf
else
        echo "NO DNS config file found"
fi
        echo " "
}

        echo "Network Diagnostics Report"
        echo "_________________________"
        echo " "

get_network_inter
get_routing_table
get_dns_config

echo "Diagnostic Collection Complete"
